{"version":3,"sources":["Dice.tsx","RollDice.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dice","props","className","isRolling","icon","faceValue","faDiceOne","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","size","getRandomFaceValue","Math","floor","random","RollDice","state","firstDiceValue","secondDiceValue","handleRollDice","e","setState","setTimeout","this","disabled","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVAqBe,SAASA,EAAKC,GAEzB,OACI,yBAAKC,UAAS,eAAUD,EAAME,UAAY,eAAgB,KACtD,kBAAC,IAAD,CAAiBC,MAfCC,EAe0BJ,EAAMI,UAdnD,CACHC,IACAC,IACAC,IACAC,IACAC,IACAC,KACFN,EAAY,IAOwDO,KAAK,SAf/E,IAA8BP,E,MCI9B,SAASQ,IACL,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,E,IAEtBC,E,4MAEjBC,MAAuB,CACnBC,eAAgBN,IAChBO,gBAAiBP,IACjBV,WAAW,G,EAGfkB,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVJ,eAAgBN,IAChBO,gBAAiBP,IACjBV,WAAW,IAGfqB,YAAW,WACP,EAAKD,SAAS,CAAEpB,WAAW,MAC5B,M,uDAIH,OACI,yBAAKD,UAAU,YACX,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAMG,UAAWoB,KAAKP,MAAMC,eAAgBhB,UAAWsB,KAAKP,MAAMf,YAClE,kBAAC,EAAD,CAAME,UAAWoB,KAAKP,MAAME,gBAAiBjB,UAAWsB,KAAKP,MAAMf,aAGvE,4BAAQD,UAAU,kBAAkBwB,SAAUD,KAAKP,MAAMf,UAAWwB,QAASF,KAAKJ,gBAC5EI,KAAKP,MAAMf,UAAY,aAAe,kB,GA7BtByB,aCLvBC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d593e29a.chunk.js","sourcesContent":["import { faDiceFive, faDiceFour, faDiceOne, faDiceSix, faDiceThree, faDiceTwo } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from 'react';\r\nimport './Dice.css';\r\ntype DiceProps = {\r\n    faceValue: number,\r\n    isRolling: boolean\r\n}\r\n\r\n// map face value to corresponding font awesome icon\r\nfunction getIconFromFaceValue(faceValue:number) {\r\n    return [\r\n        faDiceOne,\r\n        faDiceTwo,\r\n        faDiceThree,\r\n        faDiceFour,\r\n        faDiceFive,\r\n        faDiceSix\r\n    ][faceValue - 1]\r\n}\r\n\r\nexport default function Dice(props: DiceProps) {\r\n    \r\n    return (\r\n        <div className={`Dice ${props.isRolling ? 'Dice-rolling': ''}`}>\r\n            <FontAwesomeIcon icon={getIconFromFaceValue(props.faceValue)} size=\"10x\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport Dice from './Dice'\r\nimport './RollDice.css'\r\n\r\ntype RollDiceProps ={\r\n\r\n}\r\n\r\ntype RollDiceState = {\r\n    firstDiceValue: number\r\n    secondDiceValue: number\r\n    isRolling: boolean\r\n}\r\n\r\nfunction getRandomFaceValue() {\r\n    return Math.floor(Math.random() * 6) + 1\r\n}\r\nexport default class RollDice extends Component<RollDiceProps, RollDiceState> {\r\n\r\n    state: RollDiceState = {\r\n        firstDiceValue: getRandomFaceValue(),\r\n        secondDiceValue: getRandomFaceValue(),\r\n        isRolling: false\r\n    }\r\n\r\n    handleRollDice = (e: React.MouseEvent) => {\r\n        this.setState({\r\n            firstDiceValue: getRandomFaceValue(),\r\n            secondDiceValue: getRandomFaceValue(),\r\n            isRolling: true\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.setState({ isRolling: false })\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"RollDice\">\r\n                <div className='RollDice-dice-container'>\r\n                    <Dice faceValue={this.state.firstDiceValue} isRolling={this.state.isRolling} />\r\n                    <Dice faceValue={this.state.secondDiceValue} isRolling={this.state.isRolling} />    \r\n                </div>\r\n                \r\n                <button className=\"RollDice-button\" disabled={this.state.isRolling} onClick={this.handleRollDice}>\r\n                    { this.state.isRolling ? \"Rolling...\" : \"Roll Dice\" }\r\n                </button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport RollDice from './RollDice';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}